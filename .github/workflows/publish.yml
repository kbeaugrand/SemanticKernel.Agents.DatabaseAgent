# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Create Release

on:
  release: 
    types: [published]
env:
  registry_name: ghcr.io
  image_name: database-mcp-server

jobs:
  docker:
    name: Build and Push MCP Docker Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: ['Default', 'ODBCSpark']
        include:
          - tag: Default
            installer: void
            image_flavor: |
                latest=true
          - tag: ODBCSpark
            image_name: odbc-spark-
            installer: simbaspark
            version: '2.9.1'
            os: Debian-64bit
            build: '1001'
            image_flavor: |
                latest=false
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Docker Login to ACR
      # You may pin to the exact commit or the version.
      uses: docker/login-action@v3.5.0
      with:
        registry: ghcr.io
        username:  ${{ github.actor }}
        password:  ${{ secrets.GITHUB_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        # list of Docker images to use as base name for tags
        images: |
          ${{ env.registry_name }}/${{ github.repository_owner }}/${{ env.image_name }}
        # generate Docker tags based on the following events/attributes
        tags: |
          type=schedule,prefix=${{ matrix.image_name }}
          type=ref,event=branch,prefix=${{ matrix.image_name }}
          type=ref,event=pr,prefix=${{ matrix.image_name }}
          type=semver,pattern={{version}},prefix=${{ matrix.image_name }}
          type=semver,pattern={{major}}.{{minor}},prefix=${{ matrix.image_name }}
          type=semver,pattern={{major}},prefix=${{ matrix.image_name }}
        flavor: |
          ${{ matrix.image_flavor }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./
        file: ./src/SemanticKernel.Agents.DatabaseAgent.MCPServer/Dockerfile
        build-args: |
            RUNTIME_SDK_INSTALLER=${{ matrix.INSTALLER }}
            VERSION=${{ matrix.VERSION }}
            OS=${{ matrix.OS }}
            BUILD=${{ matrix.BUILD }}
        tags: 
          ${{ steps.meta.outputs.tags }}
        push: true

  nuget: 
    name: Publish NuGet Packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: 
        - SemanticKernel.Agents.DatabaseAgent
        - SemanticKernel.Agents.DatabaseAgent.QualityAssurance
        - SemanticKernel.Agents.DatabaseAgent.MCPServer

    steps:
    - uses: actions/checkout@v5
    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: 8.x
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./src/${{ matrix.package }}/
    - name: Build
      run: dotnet build --no-restore --configuration Release
      working-directory: ./src/${{ matrix.package }}/
    - name: Pack
      run: dotnet pack --configuration Release /p:Version=${{ github.event.release.tag_name }}
      working-directory: ./src/${{ matrix.package }}/
    - name: Push to NuGet
      run: |
        dotnet nuget push **/*.nupkg --source nuget.org --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate
      working-directory: ./src/${{ matrix.package }}/
    